extend type Query {
    withdraws(
        orderBy: String
        sortedBy: String
        status: String @where(operator: "LIKE")
        shop_id: Int @eq
    ): [Withdraw]
        @paginate(
            builder: "PickBazar\\GraphQL\\Queries\\WithdrawQuery@fetchWithdraws"
            defaultCount: 15
        )
    withdraw(id: ID): Withdraw
        @field(
            resolver: "PickBazar\\GraphQL\\Queries\\WithdrawQuery@fetchSingleWithdraw"
        )
}

type Withdraw {
    id: ID
    amount: Float
    status: WithdrawStatus
    shop_id: Int
    shop: Shop @belongsTo
    payment_method: String
    details: String
    note: String
    created_at: DateTime
    updated_at: DateTime
}

input createWithdrawInput {
    amount: Float!
    shop_id: Int!
    payment_method: String
    details: String
    note: String
}

input ApproveWithdrawInput {
    id: ID! @rules(apply: ["required"])
    status: WithdrawStatus!
}

extend type Mutation {
    deleteWithdraw(id: ID!): Withdraw @delete @can(ability: "super_admin")
    createWithdraw(input: createWithdrawInput @spread): Withdraw
        @field(resolver: "PickBazar\\GraphQL\\Mutation\\WithdrawMutation@store")
        @can(ability: "store_owner")
    approveWithdraw(input: ApproveWithdrawInput @spread): Withdraw
        @field(
            resolver: "PickBazar\\GraphQL\\Mutation\\WithdrawMutation@approveWithdraw"
        )
        @can(ability: "super_admin")
}

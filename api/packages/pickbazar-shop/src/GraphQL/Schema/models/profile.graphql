extend type Query {
    profiles(contact: String @where(operator: "LIKE")): [Profile!]!
        @all
        @can(ability: "super_admin")
    singleProfile(id: ID @eq): Profile @find @can(ability: "super_admin")
}

type Social {
    type: String
    link: String
}

type Profile {
    id: ID
    avatar: Attachment
    bio: String
    socials: [Social]
    contact: String
    customer: User @belongsTo
}
input ProfileInput {
    avatar: AttachmentInput
    bio: String
    socials: [SocialInput]
    contact: String
    customer: ConnectBelongsTo
}

extend type Mutation {
    createProfile(input: ProfileInput @spread): Profile
        @create
        @can(ability: "super_admin")
    updateProfile(id: ID!, input: ProfileInput @spread): Profile
        @update
        @can(ability: "super_admin")
    deleteProfile(id: ID!): Profile @delete @can(ability: "super_admin")
}

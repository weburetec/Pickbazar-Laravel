[32mtype Address {
  id: ID
  title: String
  default: Boolean
  address: UserAddress
  type: AddressType
  customer: User
}

input AddressHasMany {
  upsert: [UserAddressUpsertInput]
}

input AddressInput {
  title: String!
  default: Boolean
  address: UserAddressInput!
  type: AddressType!
  customer: ConnectBelongsTo
}

enum AddressType {
  BILLING
  SHIPPING
}

type Analytics {
  totalRevenue: Float
  todaysRevenue: Float
  totalOrders: Int
  newCustomers: Int
  totalYearSaleByMonth: [totalYearSaleByMonth]
}

type Attachment {
  thumbnail: String
  original: String
  id: ID
}

input AttachmentInput {
  thumbnail: String
  original: String
  id: ID
}

type Attribute {
  id: ID
  name: String
  slug: String
  values: [AttributeValue]
}

input AttributeBelongTo {
  connect: ID!
}

input AttributeInput {
  name: String!
}

input AttributeProductPivot {
  id: ID!
  price: Float
}

type AttributeValue {
  id: ID
  value: String
  meta: String
  attribute: Attribute
  products: [Product]
  pivot: VariationProductPivot
}

input AttributeValueCreateInput {
  value: String!
  meta: String
  attribute: AttributeBelongTo
}

input AttributeValueUpdateInput {
  id: ID!
  value: String
  meta: String
  attribute: AttributeBelongTo
}

type AuthResponse {
  token: String
  permissions: [String]
}

input CardInput {
  number: String!
  expiryMonth: String!
  expiryYear: String!
  cvv: String!
  email: String
}

type Category {
  id: ID
  name: String
  slug: String
  parent: Category
  children: [Category]
  details: String
  image: Attachment
  icon: String
  type: Type
  products: [Product]
  created_at: DateTime
  updated_at: DateTime
}

"""A paginated list of Category items."""
type CategoryPaginator {
  """Pagination information about the list of items."""
  paginatorInfo: PaginatorInfo!

  """A list of Category items."""
  data: [Category!]!
}

input CheckoutVerificationInput {
  amount: Float!
  products: [ConnectProductOrderPivot!]!
  billing_address: UserAddressInput
  shipping_address: UserAddressInput
}

input ConnectBelongsTo {
  connect: ID
}

input ConnectCouponBelongsTo {
  connect: ID!
}

input ConnectCustomerBelongsTo {
  connect: ID!
}

input ConnectOrderStatusBelongsTo {
  connect: ID!
}

input ConnectProductOrderPivot {
  product_id: ID!
  variation_option_id: ID
  order_quantity: Int
  unit_price: Float
  subtotal: Float
}

input ConnectTypeBelongsTo {
  connect: ID!
}

input ContactInput {
  subject: String!
  email: String!
  name: String!
  description: String!
}

type ContactResponse {
  message: String
  success: Boolean
}

type Coupon {
  id: ID
  code: String
  description: String
  orders: [Order]
  type: CouponType
  image: Attachment
  is_valid: Boolean
  amount: Float
  active_from: String
  expire_at: String
  created_at: DateTime
  updated_at: DateTime
}

input CouponInput {
  code: String!
  type: CouponType!
  amount: Float!
  description: String
  image: AttachmentInput
  active_from: String!
  expire_at: String!
}

"""A paginated list of Coupon items."""
type CouponPaginator {
  """Pagination information about the list of items."""
  paginatorInfo: PaginatorInfo!

  """A list of Coupon items."""
  data: [Coupon!]!
}

enum CouponType {
  """Fixed coupon"""
  FIXED_COUPON

  """Percentage coupon"""
  PERCENTAGE_COUPON

  """Free shipping coupon"""
  FREE_SHIPPING_COUPON

  """Fixed coupon"""
  FIXED_COUPON
}

input CouponUpdateInput {
  code: String!
  type: CouponType!
  amount: Float!
  description: String
  image: AttachmentInput
  active_from: String!
  expire_at: String!
}

input CreateProductInput {
  name: String!
  type_id: String!
  vendor_id: ID!
  price: Float
  max_price: Float
  min_price: Float
  sale_price: Float
  quantity: Int
  product_type: ProductType
  unit: String!
  description: String
  categories: SyncCategoryBelongsToMany
  variations: SyncAttributeBelongsToMany
  variation_options: UpsertVariationsHasMany
  in_stock: Boolean
  is_taxable: Boolean
  sku: String
  gallery: [AttachmentInput]
  image: AttachmentInput
  status: ProductStatus
  height: String
  length: String
  width: String
}

input CreateTypeInput {
  name: String!
  image: AttachmentInput
  icon: String
}

"""A date string with format `Y-m-d`, e.g. `2011-05-23`."""
scalar Date

"""
A datetime string with format `Y-m-d H:i:s`, e.g. `2018-05-23 13:43:32`.
"""
scalar DateTime

"""
A datetime and timezone string in ISO 8601 format `Y-m-dTH:i:sO`, e.g. `2020-04-20T13:53:12+02:00`.
"""
scalar DateTimeTz

type FacebookSettings {
  isEnable: Boolean
  appId: String
  pageId: String
}

input FacebookSettingsInput {
  isEnable: Boolean
  appId: String
  pageId: String
}

type GoogleSettings {
  isEnable: Boolean
  tagManagerId: String
}

input GoogleSettingsInput {
  isEnable: Boolean
  tagManagerId: String
}

input LoginInput {
  email: String!
  password: String!
}

"""
Loose type that allows any value. Be careful when passing in large `Int` or `Float` literals,
as they may not be parsed correctly on the server side. Use `String` literals if you are
dealing with really large numbers to be on the safe side.
"""
scalar Mixed

type Mutation {
  upload(attachment: [Upload]): [Attachment]
  createAddress(input: AddressInput): Address
  updateAddress(id: ID!, input: AddressInput): Address
  deleteAddress(id: ID!): Address
  createAttribute(input: AttributeInput): Attribute
  updateAttribute(id: ID!, input: AttributeInput): Attribute
  deleteAttribute(id: ID!): Attribute
  createAttributeValue(input: AttributeValueCreateInput): AttributeValue
  updateAttributeValue(input: AttributeValueUpdateInput): AttributeValue
  deleteAttributeValue(id: ID!): AttributeValue
  deleteCategory(id: ID!): Category
  createCategory(input: createCategoryInput): Category
  updateCategory(input: updateCategoryInput): Category
  verifyCheckout(input: CheckoutVerificationInput): VerifiedCheckoutData
  contact(input: ContactInput): ContactResponse
  createCoupon(input: CouponInput): Coupon
  updateCoupon(id: ID!, input: CouponUpdateInput): Coupon
  deleteCoupon(id: ID!): Coupon
  verifyCoupon(code: String!): VerifyCouponResponse
  restoreCoupon(id: ID!): Coupon
  deleteOrder(id: ID!): Order
  updateOrder(input: updateOrderInput): Order
  createOrder(input: createOrderInput): Order
  createOrderStatus(input: OrderStatusInput): OrderStatus
  updateOrderStatus(input: OrderStatusUpdateInput): OrderStatus
  deleteOrderStatus(id: ID!): OrderStatus
  deleteProduct(id: ID!): Product
  createProduct(input: CreateProductInput): Product
  updateProduct(input: UpdateProductInput): Product
  createProfile(input: ProfileInput): Profile
  updateProfile(id: ID!, input: ProfileInput): Profile
  deleteProfile(id: ID!): Profile
  updateSettings(input: SettingsInput!): Settings
  createShipping(input: ShippingInput): Shipping
  updateShipping(input: ShippingUpdateInput): Shipping
  deleteShipping(id: ID!): Shipping
  deleteTag(id: ID!): Tag
  createTag(input: createTagInput): Tag
  updateTag(input: updateTagInput): Tag
  createTax(input: TaxInput): Tax
  updateTax(input: TaxUpdateInput): Tax
  deleteTax(id: ID!): Tax
  deleteType(id: ID!): Type
  updateType(id: ID!, input: CreateTypeInput): Type
  createType(input: CreateTypeInput): Type
  login(input: LoginInput): AuthResponse
  logout: Boolean
  register(input: RegisterInput): AuthResponse
  banUser(id: ID!): User
  activeUser(id: ID!): User
  changePassword(input: changePasswordInput): passwordChangeResponse
  forgetPassword(input: forgetPasswordInput): passwordChangeResponse
  verifyForgetPasswordToken(input: verifyForgetPasswordTokenInput): passwordChangeResponse
  resetPassword(input: resetPasswordInput): passwordChangeResponse
  update(input: UserUpdateInput): User
}

type Order {
  id: ID
  tracking_number: String
  customer_id: Int
  customer_contact: String
  customer: User
  status: OrderStatus
  amount: Float
  sales_tax: Float
  total: Float
  paid_total: Float
  payment_id: String
  payment_gateway: PaymentGatewayType
  coupon: Coupon
  vendor: User
  discount: Float
  delivery_fee: Float
  delivery_time: String
  products: [Product]
  created_at: DateTime
  updated_at: DateTime
  billing_address: UserAddress
  shipping_address: UserAddress
}

"""Allows ordering a list of records."""
input OrderByClause {
  """The column that is used for ordering."""
  column: String!

  """The direction that is used for ordering."""
  order: SortOrder!
}

"""A paginated list of Order items."""
type OrderPaginator {
  """Pagination information about the list of items."""
  paginatorInfo: PaginatorInfo!

  """A list of Order items."""
  data: [Order!]!
}

type OrderProductPivot {
  variation_option_id: ID
  order_quantity: Int
  unit_price: Float
  subtotal: Float
}

type OrderStatus {
  id: ID!
  name: String
  color: String
  serial: Int
  created_at: DateTime
  updated_at: DateTime
}

input OrderStatusInput {
  name: String!
  color: String!
  serial: Int!
}

"""A paginated list of OrderStatus items."""
type OrderStatusPaginator {
  """Pagination information about the list of items."""
  paginatorInfo: PaginatorInfo!

  """A list of OrderStatus items."""
  data: [OrderStatus!]!
}

input OrderStatusUpdateInput {
  id: ID!
  name: String!
  color: String!
  serial: Int!
}

"""Pagination information about the corresponding list of items."""
type PageInfo {
  """When paginating forwards, are there more items?"""
  hasNextPage: Boolean!

  """When paginating backwards, are there more items?"""
  hasPreviousPage: Boolean!

  """When paginating backwards, the cursor to continue."""
  startCursor: String

  """When paginating forwards, the cursor to continue."""
  endCursor: String

  """Total number of node in connection."""
  total: Int

  """Count of nodes in current request."""
  count: Int

  """Current page of request."""
  currentPage: Int

  """Last page in connection."""
  lastPage: Int
}

"""Pagination information about the corresponding list of items."""
type PaginatorInfo {
  """Count of available items in the page."""
  count: Int!

  """Current pagination page."""
  currentPage: Int!

  """Index of first item in the current page."""
  firstItem: Int

  """If collection has more pages."""
  hasMorePages: Boolean!

  """Index of last item in the current page."""
  lastItem: Int

  """Last page number of the collection."""
  lastPage: Int!

  """Number of items per page in the collection."""
  perPage: Int!

  """Total items available in the collection."""
  total: Int!
}

enum PaymentGatewayType {
  STRIPE
  CASH_ON_DELIVERY
}

type PaymentInfo {
  account: String
  name: String
  email: String
  bank: String
}

enum Permission {
  """Super admin"""
  SUPER_ADMIN

  """Store owner"""
  STORE_OWNER

  """Store keeper"""
  STORE_KEEPER

  """Customer"""
  CUSTOMER
}

type Product {
  id: ID
  name: String
  slug: String
  type: Type
  product_type: ProductType
  categories: [Category]
  variations: [AttributeValue]
  variation_options: [Variation]
  pivot: OrderProductPivot
  orders: [Order]
  vendor: User
  related_products(slug: String, limit: Int): [Product]
  description: String
  in_stock: Boolean
  is_taxable: Boolean
  sale_price: Float
  max_price: Float
  min_price: Float
  sku: String
  gallery: [Attachment]
  image: Attachment
  status: ProductStatus
  height: String
  length: String
  width: String
  price: Float
  quantity: Int
  unit: String
  created_at: DateTime
  updated_at: DateTime
}

"""A paginated list of Product items."""
type ProductPaginator {
  """Pagination information about the list of items."""
  paginatorInfo: PaginatorInfo!

  """A list of Product items."""
  data: [Product!]!
}

enum ProductStatus {
  PUBLISH
  DRAFT
}

enum ProductType {
  """Simple"""
  SIMPLE

  """Variable"""
  VARIABLE
}

type Profile {
  id: ID
  avatar: Attachment
  bio: String
  socials: [Social]
  contact: String
  customer: User
}

input ProfileHasOne {
  upsert: UserProfileInput
}

input ProfileInput {
  avatar: AttachmentInput
  bio: String
  socials: [SocialInput]
  contact: String
  customer: ConnectBelongsTo
}

type Query {
  address: [Address!]!
  singleAddress(id: ID): Address
  analytics: Analytics
  popular_products(limit: Int, vendor_id: Int): [Product]
  attributes: [Attribute]
  attribute(id: ID, slug: String): Attribute
  attributeValues: [AttributeValue!]!
  attributeValue(id: ID): AttributeValue
  categoriesAlongChildren(orderBy: [QueryCategoriesAlongChildrenOrderByOrderByClause!], hasType: QueryCategoriesAlongChildrenHasTypeWhereHasConditions): [Category]
  category(id: ID, slug: String): Category
  coupon(id: ID, code: String): Coupon
  order(id: ID, tracking_number: String): Order
  order_status(id: ID): OrderStatus
  product(id: ID, slug: String): Product
  profiles(contact: String): [Profile!]!
  singleProfile(id: ID): Profile
  settings: Settings
  shippingClasses(text: String, orderBy: [QueryShippingClassesOrderByOrderByClause!]): [Shipping!]!
  shippingClass(id: ID!): Shipping
  tag(id: ID, slug: String): Tag
  taxClasses(text: String, orderBy: [QueryTaxClassesOrderByOrderByClause!]): [Tax!]!
  taxClass(id: ID!): Tax
  types(text: String, orderBy: [QueryTypesOrderByOrderByClause!]): [Type!]!
  type(id: ID, slug: String): Type
  user(id: ID): User
  vendors: [User]
  me: User
  categories(
    orderBy: [QueryCategoriesOrderByOrderByClause!]
    name: String
    text: String
    parent: Int = null
    hasType: QueryCategoriesHasTypeWhereHasConditions

    """Limits number of fetched elements."""
    first: Int = 15

    """The offset from which elements are returned."""
    page: Int
  ): CategoryPaginator
  coupons(
    text: String
    orderBy: [QueryCouponsOrderByOrderByClause!]

    """Limits number of fetched elements."""
    first: Int!

    """The offset from which elements are returned."""
    page: Int
  ): CouponPaginator
  orders(
    tracking_number: String
    orderBy: [QueryOrdersOrderByOrderByClause!]
    customer_id: Int
    vendor_id: Int

    """Limits number of fetched elements."""
    first: Int = 10

    """The offset from which elements are returned."""
    page: Int
  ): OrderPaginator
  order_statuses(
    text: String
    orderBy: [QueryOrderStatusesOrderByOrderByClause!]

    """Limits number of fetched elements."""
    first: Int = 15

    """The offset from which elements are returned."""
    page: Int
  ): OrderStatusPaginator
  products(
    orderBy: [QueryProductsOrderByOrderByClause!]
    text: String
    status: String
    vendor_id: Int
    hasType: QueryProductsHasTypeWhereHasConditions
    hasCategories: QueryProductsHasCategoriesWhereHasConditions

    """Limits number of fetched elements."""
    first: Int = 15

    """The offset from which elements are returned."""
    page: Int
  ): ProductPaginator
  tags(
    orderBy: [QueryTagsOrderByOrderByClause!]
    name: String
    text: String
    hasType: QueryTagsHasTypeWhereHasConditions

    """Limits number of fetched elements."""
    first: Int = 15

    """The offset from which elements are returned."""
    page: Int
  ): TagPaginator
  users(
    text: String
    orderBy: [QueryUsersOrderByOrderByClause!]

    """Limits number of fetched elements."""
    first: Int = 10

    """The offset from which elements are returned."""
    page: Int
  ): UserPaginator
}

"""
Allowed column names for the `hasType` argument on field `categoriesAlongChildren` on type `Query`.
"""
enum QueryCategoriesAlongChildrenHasTypeColumn {
  SLUG
}

"""
Dynamic WHERE conditions for the `hasType` argument on the query `categoriesAlongChildren`.
"""
input QueryCategoriesAlongChildrenHasTypeWhereHasConditions {
  """The column that is used for the condition."""
  column: QueryCategoriesAlongChildrenHasTypeColumn

  """The operator that is used for the condition."""
  operator: SQLOperator = EQ

  """The value that is used for the condition."""
  value: Mixed

  """A set of conditions that requires all conditions to match."""
  AND: [QueryCategoriesAlongChildrenHasTypeWhereHasConditions!]

  """A set of conditions that requires at least one condition to match."""
  OR: [QueryCategoriesAlongChildrenHasTypeWhereHasConditions!]

  """
  Check whether a relation exists. Extra conditions or a minimum amount can be applied.
  """
  HAS: QueryCategoriesAlongChildrenHasTypeWhereHasConditionsRelation
}

"""
Dynamic HAS conditions for WHERE conditions for the `hasType` argument on the query `categoriesAlongChildren`.
"""
input QueryCategoriesAlongChildrenHasTypeWhereHasConditionsRelation {
  """The relation that is checked."""
  relation: String!

  """The comparison operator to test against the amount."""
  operator: SQLOperator = GTE

  """The amount to test."""
  amount: Int = 1

  """Additional condition logic."""
  condition: QueryCategoriesAlongChildrenHasTypeWhereHasConditions
}

"""
Allowed column names for the `orderBy` argument on field `categoriesAlongChildren` on type `Query`.
"""
enum QueryCategoriesAlongChildrenOrderByColumn {
  CREATED_AT
  NAME
  UPDATED_AT
}

"""
Order by clause for the `orderBy` argument on the query `categoriesAlongChildren`.
"""
input QueryCategoriesAlongChildrenOrderByOrderByClause {
  """The column that is used for ordering."""
  column: QueryCategoriesAlongChildrenOrderByColumn!

  """The direction that is used for ordering."""
  order: SortOrder!
}

"""
Allowed column names for the `hasType` argument on field `categories` on type `Query`.
"""
enum QueryCategoriesHasTypeColumn {
  SLUG
}

"""
Dynamic WHERE conditions for the `hasType` argument on the query `categories`.
"""
input QueryCategoriesHasTypeWhereHasConditions {
  """The column that is used for the condition."""
  column: QueryCategoriesHasTypeColumn

  """The operator that is used for the condition."""
  operator: SQLOperator = EQ

  """The value that is used for the condition."""
  value: Mixed

  """A set of conditions that requires all conditions to match."""
  AND: [QueryCategoriesHasTypeWhereHasConditions!]

  """A set of conditions that requires at least one condition to match."""
  OR: [QueryCategoriesHasTypeWhereHasConditions!]

  """
  Check whether a relation exists. Extra conditions or a minimum amount can be applied.
  """
  HAS: QueryCategoriesHasTypeWhereHasConditionsRelation
}

"""
Dynamic HAS conditions for WHERE conditions for the `hasType` argument on the query `categories`.
"""
input QueryCategoriesHasTypeWhereHasConditionsRelation {
  """The relation that is checked."""
  relation: String!

  """The comparison operator to test against the amount."""
  operator: SQLOperator = GTE

  """The amount to test."""
  amount: Int = 1

  """Additional condition logic."""
  condition: QueryCategoriesHasTypeWhereHasConditions
}

"""
Allowed column names for the `orderBy` argument on field `categories` on type `Query`.
"""
enum QueryCategoriesOrderByColumn {
  CREATED_AT
  NAME
  UPDATED_AT
}

"""Order by clause for the `orderBy` argument on the query `categories`."""
input QueryCategoriesOrderByOrderByClause {
  """The column that is used for ordering."""
  column: QueryCategoriesOrderByColumn!

  """The direction that is used for ordering."""
  order: SortOrder!
}

"""
Allowed column names for the `orderBy` argument on field `coupons` on type `Query`.
"""
enum QueryCouponsOrderByColumn {
  CREATED_AT
  UPDATED_AT
}

"""Order by clause for the `orderBy` argument on the query `coupons`."""
input QueryCouponsOrderByOrderByClause {
  """The column that is used for ordering."""
  column: QueryCouponsOrderByColumn!

  """The direction that is used for ordering."""
  order: SortOrder!
}

"""
Allowed column names for the `orderBy` argument on field `order_statuses` on type `Query`.
"""
enum QueryOrderStatusesOrderByColumn {
  UPDATED_AT
  CREATED_AT
  SERIAL
}

"""
Order by clause for the `orderBy` argument on the query `order_statuses`.
"""
input QueryOrderStatusesOrderByOrderByClause {
  """The column that is used for ordering."""
  column: QueryOrderStatusesOrderByColumn!

  """The direction that is used for ordering."""
  order: SortOrder!
}

"""
Allowed column names for the `orderBy` argument on field `orders` on type `Query`.
"""
enum QueryOrdersOrderByColumn {
  CREATED_AT
  UPDATED_AT
}

"""Order by clause for the `orderBy` argument on the query `orders`."""
input QueryOrdersOrderByOrderByClause {
  """The column that is used for ordering."""
  column: QueryOrdersOrderByColumn!

  """The direction that is used for ordering."""
  order: SortOrder!
}

"""
Allowed column names for the `hasCategories` argument on field `products` on type `Query`.
"""
enum QueryProductsHasCategoriesColumn {
  SLUG
}

"""
Dynamic WHERE conditions for the `hasCategories` argument on the query `products`.
"""
input QueryProductsHasCategoriesWhereHasConditions {
  """The column that is used for the condition."""
  column: QueryProductsHasCategoriesColumn

  """The operator that is used for the condition."""
  operator: SQLOperator = EQ

  """The value that is used for the condition."""
  value: Mixed

  """A set of conditions that requires all conditions to match."""
  AND: [QueryProductsHasCategoriesWhereHasConditions!]

  """A set of conditions that requires at least one condition to match."""
  OR: [QueryProductsHasCategoriesWhereHasConditions!]

  """
  Check whether a relation exists. Extra conditions or a minimum amount can be applied.
  """
  HAS: QueryProductsHasCategoriesWhereHasConditionsRelation
}

"""
Dynamic HAS conditions for WHERE conditions for the `hasCategories` argument on the query `products`.
"""
input QueryProductsHasCategoriesWhereHasConditionsRelation {
  """The relation that is checked."""
  relation: String!

  """The comparison operator to test against the amount."""
  operator: SQLOperator = GTE

  """The amount to test."""
  amount: Int = 1

  """Additional condition logic."""
  condition: QueryProductsHasCategoriesWhereHasConditions
}

"""
Allowed column names for the `hasType` argument on field `products` on type `Query`.
"""
enum QueryProductsHasTypeColumn {
  SLUG
}

"""
Dynamic WHERE conditions for the `hasType` argument on the query `products`.
"""
input QueryProductsHasTypeWhereHasConditions {
  """The column that is used for the condition."""
  column: QueryProductsHasTypeColumn

  """The operator that is used for the condition."""
  operator: SQLOperator = EQ

  """The value that is used for the condition."""
  value: Mixed

  """A set of conditions that requires all conditions to match."""
  AND: [QueryProductsHasTypeWhereHasConditions!]

  """A set of conditions that requires at least one condition to match."""
  OR: [QueryProductsHasTypeWhereHasConditions!]

  """
  Check whether a relation exists. Extra conditions or a minimum amount can be applied.
  """
  HAS: QueryProductsHasTypeWhereHasConditionsRelation
}

"""
Dynamic HAS conditions for WHERE conditions for the `hasType` argument on the query `products`.
"""
input QueryProductsHasTypeWhereHasConditionsRelation {
  """The relation that is checked."""
  relation: String!

  """The comparison operator to test against the amount."""
  operator: SQLOperator = GTE

  """The amount to test."""
  amount: Int = 1

  """Additional condition logic."""
  condition: QueryProductsHasTypeWhereHasConditions
}

"""
Allowed column names for the `orderBy` argument on field `products` on type `Query`.
"""
enum QueryProductsOrderByColumn {
  CREATED_AT
  NAME
  UPDATED_AT
}

"""Order by clause for the `orderBy` argument on the query `products`."""
input QueryProductsOrderByOrderByClause {
  """The column that is used for ordering."""
  column: QueryProductsOrderByColumn!

  """The direction that is used for ordering."""
  order: SortOrder!
}

"""
Allowed column names for the `orderBy` argument on field `shippingClasses` on type `Query`.
"""
enum QueryShippingClassesOrderByColumn {
  CREATED_AT
  UPDATED_AT
}

"""
Order by clause for the `orderBy` argument on the query `shippingClasses`.
"""
input QueryShippingClassesOrderByOrderByClause {
  """The column that is used for ordering."""
  column: QueryShippingClassesOrderByColumn!

  """The direction that is used for ordering."""
  order: SortOrder!
}

"""
Allowed column names for the `hasType` argument on field `tags` on type `Query`.
"""
enum QueryTagsHasTypeColumn {
  SLUG
}

"""
Dynamic WHERE conditions for the `hasType` argument on the query `tags`.
"""
input QueryTagsHasTypeWhereHasConditions {
  """The column that is used for the condition."""
  column: QueryTagsHasTypeColumn

  """The operator that is used for the condition."""
  operator: SQLOperator = EQ

  """The value that is used for the condition."""
  value: Mixed

  """A set of conditions that requires all conditions to match."""
  AND: [QueryTagsHasTypeWhereHasConditions!]

  """A set of conditions that requires at least one condition to match."""
  OR: [QueryTagsHasTypeWhereHasConditions!]

  """
  Check whether a relation exists. Extra conditions or a minimum amount can be applied.
  """
  HAS: QueryTagsHasTypeWhereHasConditionsRelation
}

"""
Dynamic HAS conditions for WHERE conditions for the `hasType` argument on the query `tags`.
"""
input QueryTagsHasTypeWhereHasConditionsRelation {
  """The relation that is checked."""
  relation: String!

  """The comparison operator to test against the amount."""
  operator: SQLOperator = GTE

  """The amount to test."""
  amount: Int = 1

  """Additional condition logic."""
  condition: QueryTagsHasTypeWhereHasConditions
}

"""
Allowed column names for the `orderBy` argument on field `tags` on type `Query`.
"""
enum QueryTagsOrderByColumn {
  CREATED_AT
  NAME
  UPDATED_AT
}

"""Order by clause for the `orderBy` argument on the query `tags`."""
input QueryTagsOrderByOrderByClause {
  """The column that is used for ordering."""
  column: QueryTagsOrderByColumn!

  """The direction that is used for ordering."""
  order: SortOrder!
}

"""
Allowed column names for the `orderBy` argument on field `taxClasses` on type `Query`.
"""
enum QueryTaxClassesOrderByColumn {
  UPDATED_AT
  CREATED_AT
}

"""Order by clause for the `orderBy` argument on the query `taxClasses`."""
input QueryTaxClassesOrderByOrderByClause {
  """The column that is used for ordering."""
  column: QueryTaxClassesOrderByColumn!

  """The direction that is used for ordering."""
  order: SortOrder!
}

"""
Allowed column names for the `orderBy` argument on field `types` on type `Query`.
"""
enum QueryTypesOrderByColumn {
  UPDATED_AT
}

"""Order by clause for the `orderBy` argument on the query `types`."""
input QueryTypesOrderByOrderByClause {
  """The column that is used for ordering."""
  column: QueryTypesOrderByColumn!

  """The direction that is used for ordering."""
  order: SortOrder!
}

"""
Allowed column names for the `orderBy` argument on field `users` on type `Query`.
"""
enum QueryUsersOrderByColumn {
  UPDATED_AT
  CREATED_AT
  NAME
}

"""Order by clause for the `orderBy` argument on the query `users`."""
input QueryUsersOrderByOrderByClause {
  """The column that is used for ordering."""
  column: QueryUsersOrderByColumn!

  """The direction that is used for ordering."""
  order: SortOrder!
}

input RegisterInput {
  email: String!
  password: String!
  name: String!
  permission: String
}

"""The available SQL operators that are used to filter query results."""
enum SQLOperator {
  """Equal operator (`=`)"""
  EQ

  """Not equal operator (`!=`)"""
  NEQ

  """Greater than operator (`>`)"""
  GT

  """Greater than or equal operator (`>=`)"""
  GTE

  """Less than operator (`<`)"""
  LT

  """Less than or equal operator (`<=`)"""
  LTE

  """Simple pattern matching (`LIKE`)"""
  LIKE

  """Negation of simple pattern matching (`NOT LIKE`)"""
  NOT_LIKE

  """Whether a value is within a set of values (`IN`)"""
  IN

  """Whether a value is not within a set of values (`NOT IN`)"""
  NOT_IN

  """Whether a value is within a range of values (`BETWEEN`)"""
  BETWEEN

  """Whether a value is not within a range of values (`NOT BETWEEN`)"""
  NOT_BETWEEN

  """Whether a value is null (`IS NULL`)"""
  IS_NULL

  """Whether a value is not null (`IS NOT NULL`)"""
  IS_NOT_NULL
}

type SeoSettings {
  metaTitle: String
  metaDescription: String
  metaTags: String
  canonicalUrl: String
  ogTitle: String
  ogDescription: String
  ogImage: Attachment
  twitterHandle: String
  twitterCardType: String
}

input SeoSettingsInput {
  metaTitle: String
  metaDescription: String
  metaTags: String
  canonicalUrl: String
  ogTitle: String
  ogDescription: String
  ogImage: AttachmentInput
  twitterHandle: String
  twitterCardType: String
}

type Settings {
  id: ID
  options: SettingsOptions
}

input SettingsInput {
  options: SettingsOptionsInput
}

type SettingsOptions {
  siteTitle: String
  siteSubtitle: String
  currency: String
  logo: Attachment
  taxClass: String
  shippingClass: String
  seo: SeoSettings
  google: GoogleSettings
  facebook: FacebookSettings
}

input SettingsOptionsInput {
  siteTitle: String
  siteSubtitle: String
  currency: String
  logo: AttachmentInput
  taxClass: String
  shippingClass: String
  seo: SeoSettingsInput
  google: GoogleSettingsInput
  facebook: FacebookSettingsInput
}

type Shipping {
  id: ID
  name: String
  amount: Float
  is_global: Boolean
  type: ShippingType
}

input ShippingInput {
  name: String!
  amount: Float!
  is_global: Boolean
  type: ShippingType!
}

enum ShippingType {
  """Fixed"""
  FIXED

  """Percentage"""
  PERCENTAGE

  """Free"""
  FREE

  """Fixed"""
  FIXED
}

input ShippingUpdateInput {
  id: ID!
  name: String
  amount: Float
  is_global: Boolean
  type: ShippingType
}

type Shop {
  id: ID
  owner_id: Int
  admin_commission_rate: Float
  total_earnings: Float
  withdrawn_amount: Float
  current_balance: Float
  name: String
  description: String
  cover_image: Attachment
  logo: Attachment
  payment_info: PaymentInfo
  address: UserAddress
  settings: String
}

"""Pagination information about the corresponding list of items."""
type SimplePaginatorInfo {
  """Count of available items in the page."""
  count: Int!

  """Current pagination page."""
  currentPage: Int!

  """Index of first item in the current page."""
  firstItem: Int

  """Index of last item in the current page."""
  lastItem: Int

  """Number of items per page in the collection."""
  perPage: Int!
}

type Social {
  type: String
  link: String
}

input SocialInput {
  type: String
  link: String
}

"""The available directions for ordering a list of records."""
enum SortOrder {
  """Sort records in ascending order."""
  ASC

  """Sort records in descending order."""
  DESC
}

input SyncAttributeBelongsToMany {
  sync: [AttributeProductPivot]
}

input SyncCategoryBelongsToMany {
  sync: [ID!]
}

input SyncProductOrderBelongsToMany {
  sync: [ConnectProductOrderPivot!]
}

type Tag {
  id: ID
  name: String
  slug: String
  parent: Int
  details: String
  image: Attachment
  icon: String
  type: Type
  products: [Product]
  created_at: DateTime
  updated_at: DateTime
}

"""A paginated list of Tag items."""
type TagPaginator {
  """Pagination information about the list of items."""
  paginatorInfo: PaginatorInfo!

  """A list of Tag items."""
  data: [Tag!]!
}

type Tax {
  id: ID
  name: String
  rate: Float
  is_global: Boolean
  country: String
  state: String
  zip: String
  city: String
  priority: Int
  on_shipping: Boolean
}

input TaxInput {
  name: String
  rate: Float
  is_global: Boolean
  country: String
  state: String
  zip: String
  city: String
  priority: Int
  on_shipping: Boolean
}

input TaxUpdateInput {
  id: ID!
  name: String
  rate: Float
  is_global: Boolean
  country: String
  state: String
  zip: String
  city: String
  priority: Int
  on_shipping: Boolean
}

"""
Specify if you want to include or exclude trashed results from a query.
"""
enum Trashed {
  """Only return trashed results."""
  ONLY

  """Return both trashed and non-trashed results."""
  WITH

  """Only return non-trashed results."""
  WITHOUT
}

type Type {
  id: ID
  name: String
  slug: String
  image: Attachment
  icon: String
  created_at: DateTime
  updated_at: DateTime
}

input UpdateProductInput {
  id: ID!
  name: String
  type_id: String!
  vendor_id: ID!
  price: Float
  max_price: Float
  min_price: Float
  quantity: Int
  product_type: ProductType
  unit: String!
  description: String
  categories: SyncCategoryBelongsToMany
  variations: SyncAttributeBelongsToMany
  variation_options: UpsertVariationsHasMany
  in_stock: Boolean
  is_taxable: Boolean
  sale_price: Float
  sku: String
  gallery: [AttachmentInput]
  image: AttachmentInput
  status: ProductStatus
  height: String
  length: String
  width: String
}

scalar Upload

input UpsertVariationsHasMany {
  upsert: [VariationInput]
  delete: [ID!]
}

type User {
  id: ID
  name: String
  email: String
  created_at: DateTime
  updated_at: DateTime
  profile: Profile
  shop: Shop
  is_active: Boolean
  vendor_orders(id: ID): Int
  products(id: ID): Int
  address: [Address]
  orders: [Order]
}

type UserAddress {
  street_address: String
  country: String
  city: String
  state: String
  zip: String
}

input UserAddressInput {
  street_address: String
  country: String
  city: String
  state: String
  zip: String
}

input UserAddressUpsertInput {
  title: String!
  default: Boolean
  address: UserAddressInput!
  type: AddressType!
  id: ID
}

"""A paginated list of User items."""
type UserPaginator {
  """Pagination information about the list of items."""
  paginatorInfo: PaginatorInfo!

  """A list of User items."""
  data: [User!]!
}

input UserProfileInput {
  avatar: AttachmentInput
  bio: String
  socials: [SocialInput]
  contact: String
  id: ID
}

input UserUpdateInput {
  id: ID!
  name: String
  profile: ProfileHasOne
  address: AddressHasMany
}

type Variation {
  id: ID
  title: String
  price: Float
  sku: String
  is_disable: Boolean
  sale_price: Float
  quantity: Int
  options: [VariationOption]
}

input VariationInput {
  id: ID
  title: String
  sku: String
  is_disable: Boolean
  sale_price: Float
  price: Float
  quantity: Int
  options: [VariationOptionInput]
}

type VariationOption {
  name: String
  value: String
}

input VariationOptionInput {
  name: String
  value: String
}

type VariationProductPivot {
  price: Float
}

type VerifiedCheckoutData {
  total_tax: Float
  shipping_charge: Float
  unavailable_products: [ID]
}

type VerifyCouponResponse {
  is_valid: Boolean!
  coupon: Coupon
}

"""Dynamic WHERE conditions for queries."""
input WhereConditions {
  """The column that is used for the condition."""
  column: String

  """The operator that is used for the condition."""
  operator: SQLOperator = EQ

  """The value that is used for the condition."""
  value: Mixed

  """A set of conditions that requires all conditions to match."""
  AND: [WhereConditions!]

  """A set of conditions that requires at least one condition to match."""
  OR: [WhereConditions!]

  """
  Check whether a relation exists. Extra conditions or a minimum amount can be applied.
  """
  HAS: WhereConditionsRelation
}

"""Dynamic HAS conditions for WHERE condition queries."""
input WhereConditionsRelation {
  """The relation that is checked."""
  relation: String!

  """The comparison operator to test against the amount."""
  operator: SQLOperator = GTE

  """The amount to test."""
  amount: Int = 1

  """Additional condition logic."""
  condition: WhereConditions
}

input changePasswordInput {
  oldPassword: String!
  newPassword: String!
}

input createCategoryInput {
  name: String!
  type: ConnectTypeBelongsTo
  parent: Int
  details: String
  image: AttachmentInput
  icon: String
}

input createOrderInput {
  customer_contact: String!
  status: Int!
  products: [ConnectProductOrderPivot!]!
  amount: Float!
  sales_tax: Float
  total: Float!
  paid_total: Float!
  payment_id: String
  payment_gateway: PaymentGatewayType!
  coupon_id: Int
  vendor_id: ID!
  discount: Float
  delivery_fee: Float
  delivery_time: String
  card: CardInput
  billing_address: UserAddressInput
  shipping_address: UserAddressInput
}

input createTagInput {
  name: String!
  type: ConnectTypeBelongsTo
  details: String
  image: AttachmentInput
  icon: String
}

input forgetPasswordInput {
  email: String!
}

type passwordChangeResponse {
  message: String
  success: Boolean
}

input resetPasswordInput {
  token: String!
  email: String!
  password: String!
}

type totalYearSaleByMonth {
  total: Float
  month: String
}

input updateCategoryInput {
  id: ID!
  name: String
  type: ConnectTypeBelongsTo
  parent: Int
  details: String
  image: AttachmentInput
  icon: String
}

input updateOrderInput {
  id: ID!
  status: ConnectOrderStatusBelongsTo!
  products: SyncProductOrderBelongsToMany
  coupon: ConnectCouponBelongsTo
  vendor_id: ID!
  delivery_time: String
  billing_address: UserAddressInput
  shipping_address: UserAddressInput
}

input updateTagInput {
  id: ID!
  name: String
  type: ConnectTypeBelongsTo
  details: String
  image: AttachmentInput
  icon: String
}

input verifyForgetPasswordTokenInput {
  token: String!
  email: String!
}
[39m
